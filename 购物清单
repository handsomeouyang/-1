#include<stdio.h>
#include<stdlib.h>
#include<string.h>
struct ShoppingItem {
	char name[50]; // 商品名称
	int quantity; // 商品数量
	struct ShoppingItem* next; // 指向下一个节点的指针
};
//然后，我们创建一个链表头指针，表示购物清单的起始点：
struct ShoppingItem* shoppingList = NULL; // 初始化购物清单为空
//1. 添加商品到购物清单：
void addItem(char itemName[], int itemQuantity) {
	struct ShoppingItem* newItem = (struct ShoppingItem*)malloc(sizeof(struct ShoppingItem));
	//此处填写若干语句；
	strcpy(newItem->name, itemName);
	newItem->quantity = itemQuantity;
}
//2. 从购物清单中移除商品：
void removeItem(char itemName[]) {
	struct ShoppingItem* current = shoppingList;
	struct ShoppingItem* previous = NULL;
	while (current != NULL) {
		if (strcmp(current->name, itemName) == 0) {
			if (previous != NULL) {
				previous->next = current->next;
			}
			else {
				shoppingList = current->next;
			}
			free(current);
			break;
		}
		//此处填写两行；
		previous = current;
		current = current->next;//更新当前和前一个购物项指针
	}
}
//线性表的链式存储结构课堂练习题
//3. 查看购物清单：
void displayList() {
	struct ShoppingItem* current = shoppingList;
	printf("购物清单:\n");
	while (current != NULL) {
		printf("%s - 数量：%d\n", current->name, current->quantity);
		//此处填写一句；
		current = current->next;
	}
}
//4. 修改购物清单中商品的数量：
void updateQuantity(char itemName[], int newItemQuantity) {
	struct ShoppingItem* current = shoppingList;
	while (current != NULL) {
		if (strcmp(current->name, itemName) == 0) {
			//此处填写一句。
			scanf_s("%d", &current->quantity);
				break;
		}
		current = current->next;
	}
}
//5. 清空购物清单：
void clearList() {
	while (shoppingList != NULL) {
		//此处填写两句。
		struct ShoppingItem* temp = shoppingList;
			temp = shoppingList;
		shoppingList = temp->next;
			free(temp);
	}
}
//6. 计算购物清单中商品的总数量：
int totalQuantity() {
	struct ShoppingItem* current = shoppingList;
	int total = 0;
	while (current != NULL) {
		//此处填写两句；
		total++;
		current = current->next;
	}
	return total;
}
//线性表的链式存储结构课堂练习题
//7. 查找购物清单中的商品：
void findItem(char itemName[]) {
	struct ShoppingItem* current = shoppingList;
	printf("查找商品 \"%s\" ：\n", itemName);
	while (current != NULL) {
		if (strcmp(current->name, itemName) == 0) {
			printf("%s - 数量：%d\n", current->name, current->quantity);
			return;
		}
		//此处填写一句。
		current = current->next;
	}
	printf("未找到商品 \"%s\"。\n", itemName);
}
//8. 排序购物清单：
void sortList() {
	struct ShoppingItem* current = shoppingList;
	struct ShoppingItem* nextItem = NULL;
	char tempName[50];
	int tempQuantity;
	while (current != NULL) {
		nextItem = current->next;
		while (nextItem != NULL) {
			if (strcmp(current->name, nextItem->name) > 0) {
				// 交换商品信息
				//此处填写 3 句；
				strcpy(tempName,current->name);
				strcpy(current->name,nextItem->name );
				strcpy(nextItem->name,tempName);
				tempQuantity = current->quantity;
				current->quantity = nextItem->quantity;
				nextItem->quantity = tempQuantity;
			}
			nextItem = nextItem->next;
		}
		current = current->next;
	}
}
//9. 合并购物清单：
//假设你有两个不同的购物清单，你希望将它们合并成一个。
void mergeLists(struct ShoppingItem** list1, struct ShoppingItem** list2) {
	struct ShoppingItem* current = *list1;
	//线性表的链式存储结构课堂练习题
		// 遍历到第一个购物清单的末尾
		//补充循环语句；
		// 将第二个购物清单连接到第一个清单的末尾
	while (current->next != NULL) {
			current = current->next;
		}
		current->next = *list2;
	*list2 = NULL; // 清空第二个购物清单的头指针，防止误用
}
/*10. 删除购物清单中的商品：
实现一个函数，可以根据商品名称删除购物清单中的商品项。如果有多个相同名称的商品，
可以选择删除其中一个或全部。*/
void deleteItem(char itemName[], int deleteAll) {
	struct ShoppingItem* current = shoppingList;
	struct ShoppingItem* prev = NULL;
	while (current != NULL) {
		if (strcmp(current->name, itemName) == 0) {
			if (prev == NULL) {
				// 如果要删除的是第一个节点
				struct ShoppingItem* temp = shoppingList;
				//填写一句；
				shoppingList = shoppingList->next;
					free(temp);
				if (!deleteAll) break;
			}
			else {
				// 如果要删除的不是第一个节点
				//填写一句；
				prev->next = current->next;
					free(current);
				current = prev->next;
				if (!deleteAll) break;
			}
		}
		else {
			prev = current;
			current = current->next;
		}
	}
}
int main(void) {
	int x;
	char Name[50];
	int Quantity, election;
	printf("请输入商品名称和商品数目\n");

	// 声明第二个购物清单
	struct ShoppingItem* list2 = NULL;

	while (1) {
		scanf("%d", &x);
		if (x == 1) // 添加商品到购物清单
		{
			printf("请输入商品名称和商品数目\n");
			scanf("%s %d", Name, &Quantity);
			addItem(Name, Quantity);
		}
		else if (x == 2) // 从购物清单中移除商品
		{
			printf("请输入要删除的商品名称");
			scanf("%s", Name);
			removeItem(Name);
		}
		else if (x == 3) // 查看购物清单
		{
			displayList();
		}
		else if (x == 4) // 修改购物清单中商品的数量
		{
			printf("请输入要修改的商品名称和数量");
			scanf("%s %d", Name, &Quantity);
			updateQuantity(Name, Quantity);
		}
		else if (x == 5) // 清空购物清单
		{
			clearList();
		}
		else if (x == 6) // 计算购物清单中商品的总数量
		{
			int total = totalQuantity();
			printf("购物清单中商品的总数量：%d\n", total);
		}
		else if (x == 7) // 查找购物清单中的商品
		{
			printf("输入查找的商品名称");
			scanf("%s", Name);
			findItem(Name);
		}
		else if (x == 8) // 排序购物清单
		{
			sortList();
		}
		else if (x == 9) // 合并购物清单
		{
			printf("输入要合并的购物清单\n");
			// 创建第一个购物清单（已经在之前的代码中）
			struct ShoppingItem* list1 = shoppingList;

			// 创建第二个购物清单
			struct ShoppingItem* item = NULL;
			while (1) {
				printf("请输入商品名称和商品数目 (输入 -1 来停止输入)\n");
				scanf("%s %d", Name, &Quantity);
				if (strcmp(Name, "-1") == 0) {
					break;
				}
				addItem(Name, Quantity, &list2);
			}

			// 合并购物清单
			mergeLists(&list1, &list2);
		}
		else if (x == 10) // 删除购物清单中的商品
		{
			printf("请输入删除的商品名称\n");
			scanf("%s", Name);
			printf("选择是否全部删除，是 输入 1 ， 否 输入 0\n");
			scanf("%d", &election);
			deleteItem(Name, election);
		}
	}
	return 0;
}
